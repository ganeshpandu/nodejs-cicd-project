name: Build and Push to GCP Artifact Registry

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Load config.json from secret
      - name: Load GCP Config from Secret
        run: |
          echo "Reading config from MY_JSON_SECRET..."
          echo '${{ secrets.MY_JSON_SECRET }}' | tr -d '\r' | jq . > config.json
          echo "‚úÖ Config file created:"
          cat config.json

          GAR_REPO=$(jq -r '.GAR_REPO' config.json)
          GCP_REGION=$(jq -r '.GCP_REGION' config.json)

          echo "GAR_REPO=$GAR_REPO" >> $GITHUB_ENV
          echo "GCP_REGION=$GCP_REGION" >> $GITHUB_ENV

          # Set GCP_PROJECT_ID directly (from SA key)
          PROJECT_ID=$(echo '${{ secrets.GCP_SA_KEY }}' | jq -r '.project_id')
          echo "GCP_PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV

      # 3Ô∏è‚É£ Authenticate with GCP using Service Account Key
      - name: Set up GCP authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 4Ô∏è‚É£ Configure Docker for Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker $GCP_REGION-docker.pkg.dev --quiet

      # 5Ô∏è‚É£ Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          IMAGE_URI="$GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$GAR_REPO/nodejs-cicd-app"
          echo "üöÄ Building and pushing image: $IMAGE_URI"

          docker build -t $IMAGE_URI:latest .
          docker push $IMAGE_URI:latest

          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          docker tag $IMAGE_URI:latest $IMAGE_URI:$SHORT_SHA
          docker push $IMAGE_URI:$SHORT_SHA

          echo "‚úÖ Image pushed successfully to: $IMAGE_URI"
