name: CI/CD Pipeline..

on:
  push:
    branches: [ "GAR-Repo" ]

jobs:
  compile:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install Dependencies
        run: npm ci

  test:
    runs-on: self-hosted
    needs: compile
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install Dependencies
        run: npm ci
      - name: Run Unit Tests
        run: npm test

  docker_build_and_push:
    runs-on: self-hosted
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Load .env from Secrets
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          set -a
          source .env
          set +a

      - name: Authenticate to Google Cloud
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          echo "$GCP_SA_KEY" > gcp-key.json
          gcloud auth activate-service-account --key-file=gcp-key.json
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build and Tag Docker Image
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          set -a
          source .env
          set +a

          IMAGE_NAME="${{ secrets.GCP_REGION }}-docker.pkg.dev/$GCP_PROJECT_ID/$GAR_REPO/nodejs-cicd-app"

          docker build -t $IMAGE_NAME:latest .
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:${{ github.sha }}

      - name: Trivy Image Scan
        run: |
          IMAGE_NAME="${{ secrets.GCP_REGION }}-docker.pkg.dev/$GCP_PROJECT_ID/$GAR_REPO/nodejs-cicd-app"
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image $IMAGE_NAME:latest

      - name: Push Docker Image to Artifact Registry
        run: |
          IMAGE_NAME="${{ secrets.GCP_REGION }}-docker.pkg.dev/$GCP_PROJECT_ID/$GAR_REPO/nodejs-cicd-app"
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}

  deploy_to_local:
    runs-on: self-hosted
    needs: docker_build_and_push
    steps:
      - name: Stop Existing Container (if any)
        run: |
          docker ps -q --filter "name=nodeapp" | grep -q . && \
          docker stop nodeapp && docker rm nodeapp || echo "No container to stop"

      - name: Pull Latest Docker Image
        run: |
          IMAGE_NAME="${{ secrets.GCP_REGION }}-docker.pkg.dev/$GCP_PROJECT_ID/$GAR_REPO/nodejs-cicd-app"
          docker pull $IMAGE_NAME:latest

      - name: Run New Container with Restart Policy
        run: |
          IMAGE_NAME="${{ secrets.GCP_REGION }}-docker.pkg.dev/$GCP_PROJECT_ID/$GAR_REPO/nodejs-cicd-app"
          docker run -d -p 80:3000 \
            --restart unless-stopped \
            --name nodeapp \
            $IMAGE_NAME:latest
